Curso de Java Avançado.

ng new Curso-Angular-REST
cd Curso-Angular-REST/
npm start

- Para exibir arquivos em oculto no finder do Mac é necessário apertar 
    control + shift + .

- O index.hmtl é o arquivo inicial do nosso projeto.
- Temos que saber conectar nosso front-end em Angular com nossa API REST 
feita com Spring Boot (construída no módulo anterior do curso).

Estrutura de Pastas do Angular

- e2e é o diretório para executar testes, ou seja testes unitários
através de frameworks.
- node_modules é a pasta onde fica o diretório do NodeJs.
- src guarda todo o código fonte do projeto.
- angular.json é o arquivo onde fica as configurações do Angular para o projeto.
- assets guarda todos os arquivos estaticos como icones, imagens, pdfs e etc.
- environments é a pasta onde ficam as configurações de ambiente, por exemplo
se o projeto está em desenvolvimento ou em produção.
- index.html é a página inicial do sistema e faz referencia ao elemento principal
que é o app-root
- main.ts é o ponto de entrada para inicialização dos módulos, serve para dar o start 
em um ou mais módulos que serão chamados em sequência.
- app é a pasta padrão do projeto que contém o primeiro componente de exemplo.
- Um componente no Angular é basicamente a união de três arquivos, sendo um html,
css e typescript.
- Podemos ter serviços e algumas outras coisas dentro de um componente.
- Uma tela de cadastro de produto pode ser um componente por exemplo.
- app.component.spec.ts arquivo para testes unitários do componente.
- app.module.ts onde fica a declaração do componente e inicialização dos módulos.

Instalação do Bootstrap framework

- npm install bootstrap@4.1.3 jquery@3.3.1 popper.js@1.14.3 --save
- Temos que declarar o css do bootstrap no arquivo angular.json, veja abaixo:

            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.css",
              "src/styles.css"
            ],
            "scripts": [
              "node_modules/jquery/dist/jquery.js",
              "node_modules/popper.js/dist/umd/popper.js",
              "node_modules/bootstrap/dist/js/bootstrap.js"
            ]

- Acima está toda a declaração do css do Bootstrap dentro do arquivo angular.json.
- Próxima aula é testar se está funcionando o bootstrap.

- É necessário fazer o módulo 31 do curso para depois fazer o módulo 32,
pois um depende do outro.

- Vamos criar uma classe de constantes via linha de comando:
    ng generate class AppConstants --skipTests=true

- A classe acima foi criada dentro do diretório: Curso-Angular-REST/src/app
- Vamos criar uma pasta chamada service dentro da pasta app
- Podemos criar com o comando mkdir service
- Dentro da pasta service rodamos o comando: ng generate service LoginService --skipTests=true
- Obs.: O comando --skipTests já está depreciado o novo é --skip-tests
- Uma dica é quando for criar um serviço não colocar o nome Service no nome do serviço 
pois ele é adicionado automaticamente.
- O jeito correto é dessa forma: ng generate service Login --skipTests=true

Access-Control-Allow-Origin

"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWxpbyIsImV4cCI6MTYxNDUxNDgyNH0.lF5P1k9c7nOAEfmTXknTgDgQAc6VaDiRCEXNEsjQ4NiOyCCkltH_6lXOz01JRj_B31jSdkY6aHvktHzZI7pT1w"

Validando formulário de login

- Vamos criar nosso componente Home com o comando: ng g c Home --skipTests=true

Criando um Interceptor

- O interceptador tanto de requisição como de resposta, tudo o que fizermos no sistema
passará pelo interceptador e a resposta também passará por ele.

- Sempre é necessário enviar um token de autenticação para podermos fazer um cadastro,
atualizar, consultar, deletar um produto por exemplo. No Angular o front-end precisa 
enviar esse token a cada requisição, antigamente o token era testado através do postman,
nesse caso o interceptador mandará o token a cada requisição realizada.

- Dentro da pasta service em Curso-Angular-REST/src/app/service vamos criar nosso service
de interceptação.
- Criaremos nosso serviço com o seguinte comando: ng g s HeaderInterceptor --skipTests=true

Class Model e Service do Usuário

- Vamos criar um service de usuario com o comando: ng g s Usuario --skipTests=true
- Vamos criar uma classe model no Angular com os mesmos atributos da classe de Usuario 
que está no Java, vamos criar uma classe para representar os dados que virão do banco
de dados.
- Na classe de modelo no lado front-end colocamos somente os atributos que podem ser 
publicos, como nome, login e id por exemplo.

Criando Componente tela de Usuário

- Criamos nosso componente User com o comando: ng g component User --skipTests=true
- Nosso componente de usuario foi criado no diretório Curso-Angular-REST/src/app/component/user
- Quando criamos um componente é criado uma pasta com o nome do componente com os três 
arquivos que fazem parte do componente dentro.
- O certo é entrar dentro do diretório component e então executar o comando para criar
o componente.

- O arquivo de implantação de um projeto em Angular pode ser adicionado no servidor TomCat.
- O arquivo de implantação é gerado dentro da pasta dist.
- ng build -c production --base-href /angular8/
- Será criado uma pasta chamada angular8 com os arquivos do projeto dentro, basta copiar
a pasta para webapps do TomCat, antes é preciso editar no arquivo index.html o href e 
deixar /angular8/ 
- A referencia do href deve ser o mesmo nome da pasta que está o projeto.

Criando o DELETE em nosso projeto Angular 8

Rotas de edição e tela de cadastro - Parte 1

Protegendo as rotas do com Router Guard

- Existe outras partes que são as rotas que definem por exemplo que um usuário admin 
tem acesso a determinadas rotas, vamos conhecer o Router Guard que é quem faz a 
verificação se o usuário que esta logado tem acesso a rota que deseja acessar.

- Criamos o serviço de guardião com o comando: ng generate guard RouteGuardian

- O guardião é referenciado no arquivo app.module.ts através do método canActivate
dentro do array de rotas.

- Através do guardião também podemos implementar controles de acesso de acordo com o
papél do usuário.

Criando o Controller Advice - Parte 1

- xxx...